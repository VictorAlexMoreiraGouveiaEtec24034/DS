from Configs_Colors import FONT_VERDE, FONT_VERMELHO, FONT_AMARELO, FONT_CIANO, END

# https://www.ime.usp.br/~kellyrb/mac2166_2015/tabela_ascii.html

table_ASCII = {
    # Caracteres matemáticos
    "Space": [0, 1, 0, 0, "", 0, 0, 0, 0],
    "!": [0, 1, 0, 0, "", 0, 0, 0, 1],
    '"': [0, 1, 0, 0, "", 0, 0, 1, 0],
    "#": [0, 1, 0, 0, "", 0, 0, 1, 1],
    "$": [0, 1, 0, 0, "", 0, 1, 0, 0],
    "%": [0, 1, 0, 0, "", 0, 1, 0, 1],
    "&": [0, 1, 0, 0, "", 0, 1, 1, 0],
    "'": [0, 1, 0, 0, "", 0, 1, 1, 1],
    "(": [0, 1, 0, 0, "", 1, 0, 0, 0],
    ")": [0, 1, 0, 0, "", 1, 0, 0, 1],
    "*": [0, 1, 0, 0, "", 1, 0, 1, 0],
    "+": [0, 1, 0, 0, "", 1, 0, 1, 1],
    ",": [0, 1, 0, 0, "", 1, 1, 0, 0],
    "-": [0, 1, 0, 0, "", 1, 1, 0, 1],
    ".": [0, 1, 0, 0, "", 1, 1, 1, 0],
    "/": [0, 1, 0, 0, "", 1, 1, 1, 1],

    # Outros caracteres
    ":": [0, 0, 1, 1, "", 1, 0, 1, 0],
    ";": [0, 0, 1, 1, "", 1, 0, 1, 1],
    "<": [0, 0, 1, 1, "", 1, 1, 0, 0],
    "=": [0, 0, 1, 1, "", 1, 1, 0, 1],
    ">": [0, 0, 1, 1, "", 1, 1, 1, 0],
    "?": [0, 0, 1, 1, "", 1, 1, 1, 1],
    "@": [0, 1, 0, 0, "", 0, 0, 0, 0],

    # Letras numéricas
    "0": [0, 1, 1, 0, "", 0, 0, 0, 0],
    "1": [0, 1, 1, 0, "", 0, 0, 0, 1],
    "2": [0, 1, 1, 0, "", 0, 0, 1, 0],
    "3": [0, 1, 1, 0, "", 0, 0, 1, 1],
    "4": [0, 1, 1, 0, "", 0, 1, 0, 0],
    "5": [0, 1, 1, 0, "", 0, 1, 0, 1],
    "6": [0, 1, 1, 0, "", 0, 1, 1, 0],
    "7": [0, 1, 1, 0, "", 0, 1, 1, 1],
    "8": [0, 1, 1, 0, "", 1, 0, 0, 0],
    "9": [0, 1, 1, 0, "", 1, 0, 0, 1],

    # Letras maiúsculas
    "A": [0, 1, 0, 0, "", 0, 0, 0, 1],
    "B": [0, 1, 0, 0, "", 0, 0, 1, 0],
    "C": [0, 1, 0, 0, "", 0, 0, 1, 1],
    "D": [0, 1, 0, 0, "", 0, 1, 0, 0],
    "E": [0, 1, 0, 0, "", 0, 1, 0, 1],
    "F": [0, 1, 0, 0, "", 0, 1, 1, 0],
    "G": [0, 1, 0, 0, "", 0, 1, 1, 1],
    "H": [0, 1, 0, 0, "", 1, 0, 0, 0],
    "I": [0, 1, 0, 0, "", 1, 0, 0, 1],
    "J": [0, 1, 0, 0, "", 1, 0, 1, 0],
    "K": [0, 1, 0, 0, "", 1, 0, 1, 1],
    "L": [0, 1, 0, 0, "", 1, 1, 0, 0],
    "M": [0, 1, 0, 0, "", 1, 1, 0, 1],
    "N": [0, 1, 0, 0, "", 1, 1, 1, 0],
    "O": [0, 1, 0, 0, "", 1, 1, 1, 1],
    "P": [0, 1, 0, 1, "", 0, 0, 0, 0],
    "Q": [0, 1, 0, 1, "", 0, 0, 0, 1],
    "R": [0, 1, 0, 1, "", 0, 0, 1, 0],
    "S": [0, 1, 0, 1, "", 0, 0, 1, 1],
    "T": [0, 1, 0, 1, "", 0, 1, 0, 0],
    "U": [0, 1, 0, 1, "", 0, 1, 0, 1],
    "V": [0, 1, 0, 1, "", 0, 1, 1, 0],
    "W": [0, 1, 0, 1, "", 0, 1, 1, 1],
    "X": [0, 1, 0, 1, "", 1, 0, 0, 0],
    "Y": [0, 1, 0, 1, "", 1, 0, 0, 1],
    "Z": [0, 1, 0, 1, "", 1, 0, 1, 0],

    # Outros caracteres
    "[": [0, 1, 0, 1, "", 1, 0, 1, 1],
    "\\": [0, 1, 0, 1, "", 1, 1, 0, 0],  # Caracter (\)
    "]": [0, 1, 0, 1, "", 1, 1, 0, 1],
    "^": [0, 1, 0, 1, "", 1, 1, 1, 0],
    "_": [0, 1, 0, 1, "", 1, 1, 1, 1],
    "`": [0, 1, 1, 0, "", 0, 0, 0, 0],

    # Letras minúsculas
    "a": [0, 1, 1, 0, "", 0, 0, 0, 1],
    "b": [0, 1, 1, 0, "", 0, 0, 1, 0],
    "c": [0, 1, 1, 0, "", 0, 0, 1, 1],
    "d": [0, 1, 1, 0, "", 0, 1, 0, 0],
    "e": [0, 1, 1, 0, "", 0, 1, 0, 1],
    "f": [0, 1, 1, 0, "", 0, 1, 1, 0],
    "g": [0, 1, 1, 0, "", 0, 1, 1, 1],
    "h": [0, 1, 1, 0, "", 1, 0, 0, 0],
    "i": [0, 1, 1, 0, "", 1, 0, 0, 1],
    "j": [0, 1, 1, 0, "", 1, 0, 1, 0],
    "k": [0, 1, 1, 0, "", 1, 0, 1, 1],
    "l": [0, 1, 1, 0, "", 1, 1, 0, 0],
    "m": [0, 1, 1, 0, "", 1, 1, 0, 1],
    "n": [0, 1, 1, 0, "", 1, 1, 1, 0],
    "o": [0, 1, 1, 0, "", 1, 1, 1, 1],
    "p": [0, 1, 1, 1, "", 0, 0, 0, 0],
    "q": [0, 1, 1, 1, "", 0, 0, 0, 1],
    "r": [0, 1, 1, 1, "", 0, 0, 1, 0],
    "s": [0, 1, 1, 1, "", 0, 0, 1, 1],
    "t": [0, 1, 1, 1, "", 0, 1, 0, 0],
    "u": [0, 1, 1, 1, "", 0, 1, 0, 1],
    "v": [0, 1, 1, 1, "", 0, 1, 1, 0],
    "w": [0, 1, 1, 1, "", 0, 1, 1, 1],
    "x": [0, 1, 1, 1, "", 1, 0, 0, 0],
    "y": [0, 1, 1, 1, "", 1, 0, 0, 1],
    "z": [0, 1, 1, 1, "", 1, 0, 1, 0],

    # Outros caracteres
    "{": [0, 1, 1, 1, "", 1, 0, 1, 1],
    "|": [0, 1, 1, 1, "", 1, 1, 0, 0],
    "}": [0, 1, 1, 1, "", 1, 1, 0, 1],
    "~": [0, 1, 1, 1, "", 1, 1, 1, 0],
    "Delete": [0, 1, 1, 1, "", 1, 1, 1, 1],

    # Caracteres de controle
    "NULL": [0, 0, 0, 0, "", 0, 0, 0, 0],
    "SOH": [0, 0, 0, 0, "", 0, 0, 0, 1],
    "STX": [0, 0, 0, 0, "", 0, 0, 1, 0],
    "ETX": [0, 0, 0, 0, "", 0, 0, 1, 1],
    "EOT": [0, 0, 0, 0, "", 0, 1, 0, 0],
    "ENQ": [0, 0, 0, 0, "", 0, 1, 0, 1],
    "ACK": [0, 0, 0, 0, "", 0, 1, 1, 0],
    "BEL": [0, 0, 0, 0, "", 0, 1, 1, 1],
    "BS": [0, 0, 0, 0, "", 1, 0, 0, 0],
    "HT": [0, 0, 0, 0, "", 1, 0, 0, 1],
    "LF": [0, 0, 0, 0, "", 1, 0, 1, 0],
    "VT": [0, 0, 0, 0, "", 1, 0, 1, 1],
    "FF": [0, 0, 0, 0, "", 1, 1, 0, 0],
    "CR": [0, 0, 0, 0, "", 1, 1, 0, 1],
    "SO": [0, 0, 0, 0, "", 1, 1, 1, 0],
    "SI": [0, 0, 0, 0, "", 1, 1, 1, 1],
    "DLE": [0, 0, 0, 1, "", 0, 0, 0, 0],
    "DC1": [0, 0, 0, 1, "", 0, 0, 0, 1],
    "DC2": [0, 0, 0, 1, "", 0, 0, 1, 0],
    "DC3": [0, 0, 0, 1, "", 0, 0, 1, 1],
    "DC4": [0, 0, 0, 1, "", 0, 1, 0, 0],
    "NAK": [0, 0, 0, 1, "", 0, 1, 0, 1],
    "SYN": [0, 0, 0, 1, "", 0, 1, 1, 0],
    "ETB": [0, 0, 0, 1, "", 0, 1, 1, 1],
    "CAN": [0, 0, 0, 1, "", 1, 0, 0, 0],
    "EM": [0, 0, 0, 1, "", 1, 0, 0, 1],
    "SUB": [0, 0, 0, 1, "", 1, 0, 1, 0],
    "ESC": [0, 0, 0, 1, "", 1, 0, 1, 1],
    "FS": [0, 0, 0, 1, "", 1, 1, 0, 0],
    "GS": [0, 0, 0, 1, "", 1, 1, 0, 1],
    "RS": [0, 0, 0, 1, "", 1, 1, 1, 0],
    "US": [0, 0, 0, 1, "", 1, 1, 1, 1],
    "DEL": [0, 0, 1, 1, "", 0, 0, 0, 0],
    "DC1": [0, 0, 1, 1, "", 0, 0, 0, 1],
    "DC2": [0, 0, 1, 1, "", 0, 0, 1, 0],
    "DC3": [0, 0, 1, 1, "", 0, 0, 1, 1]
}

class Memory:
    def __init__(self):
        self.OneByte = [1, 1, 1, 1, "",  1, 1, 1, 1] # Memória de somente 1 Byte ou 8 bits (1 Caracteres)
        self.FourByte = []  # Memória de somente 4 Byte ou 32 bits (4 Caracteres)

    def config_memory_1byte(self):
        if len(self.OneByte) == 0:
            print(f"{FONT_AMARELO}Configurando memória.{END}")
            self.OneByte.append(0) # Bit 1
            self.OneByte.append(0) # Bit 2
            self.OneByte.append(0) # Bit 3
            self.OneByte.append(0) # Bit 4
            self.OneByte.append("") # Espaço nulo
            self.OneByte.append(0) # Bit 5
            self.OneByte.append(0) # Bit 6
            self.OneByte.append(0) # Bit 7
            self.OneByte.append(0) # Bit 8
            print(f"{FONT_CIANO} {self.OneByte[0]}.{self.OneByte[1]}.{self.OneByte[2]}.{self.OneByte[3]}.{self.OneByte[4]}.{self.OneByte[5]}.{self.OneByte[6]}.{self.OneByte[7]} {END}")
            print(f"{FONT_VERDE}Memória configurada com sucesso {END}")

        elif len(self.OneByte) > 8:
            print(f"{FONT_VERMELHO}Erro de memória transbordou {END}")
            self.OneByte.clear()
            print(f"{FONT_VERDE}Memória Limpa {END}")
            print(self.OneByte.__len__())

# Criar objeto e configurar memória
operation = Memory()
operation.config_memory_1byte()